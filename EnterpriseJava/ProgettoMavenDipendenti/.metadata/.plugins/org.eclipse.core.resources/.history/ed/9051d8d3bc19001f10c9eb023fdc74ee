package seriea;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import jakarta.transaction.Transactional;

@Service
@Transactional
public class GiocatoreDao {
	@Autowired
	 private GiocatoreRepository repo;
	@Autowired
	private SquadraRepository repoTeam;
	
	public List<Giocatore> findBySquadraName(String nomeTeam) {
        return repo.findBySquadraName(nomeTeam);
    }
	public List<Giocatore> listAll() {
        return repo.findAll();
    }
	
	public void addGiocatore(Giocatore giocatore) throws Exception {
     if( repoTeam.existsByNomesquadra(giocatore.getSquadraName())) {
    	 repo.save(giocatore);
     }else {
    	 throw new Exception("Squadra Inesistente");
     }
    	 
    }
	public void deleteGiocatore(Giocatore giocatore) throws Exception {
		if( repoTeam.existsByNomesquadra(giocatore.getSquadraName())) {
			repo.deleteById(giocatore);;
	     }else {
	    	 throw new Exception("Squadra Inesistente");
	     }
	
	}
	
//	}
//	public void deleteGiocatore(Long id) {
//        Optional<Giocatore> giocatoreOptional = repo.findById(id);
//        if (giocatoreOptional.isPresent()) {
//            Giocatore giocatore = giocatoreOptional.get();
//            if (giocatore.getSquadraName() != null) { // Controlla se il giocatore è associato a una squadra
//                // Puoi gestire il caso in cui il giocatore è associato a una squadra, ad esempio lanciando un'eccezione o gestendo in altro modo
//                throw new IllegalStateException("Impossibile eliminare il giocatore perché è associato a una squadra");
//            }
//            repo.delete(giocatore);
//        } else {
//            // Gestione del caso in cui il giocatore non esiste per l'ID fornito
//            throw new IllegalArgumentException("Il giocatore con ID " + id + " non esiste");
//        }
    }
